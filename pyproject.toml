[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stash-tagfarm"
dynamic = ["version"]
description = "A Python package for managing and organizing stash tags"
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "xchewtoyx", email = "your-email@example.com" },
]
maintainers = [
    { name = "xchewtoyx", email = "your-email@example.com" },
]
keywords = ["stash", "tags", "organization", "management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "pathlib",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
    "pre-commit",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-mock",
]

[project.urls]
Homepage = "https://github.com/xchewtoyx/stash-tagfarm"
Repository = "https://github.com/xchewtoyx/stash-tagfarm"
Issues = "https://github.com/xchewtoyx/stash-tagfarm/issues"
Changelog = "https://github.com/xchewtoyx/stash-tagfarm/blob/main/CHANGELOG.md"

[project.scripts]
tagfarm = "tagfarm.cli:main"

[tool.hatch.version]
path = "tagfarm/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["tagfarm"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tagfarm"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["tagfarm"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["tagfarm"]

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]